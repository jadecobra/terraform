display_directory() {
    ls -al
}

create_file() {
    'creating $1'
}

rm -rf docker
mkdir docker
cd docker
display_directory
cdktf init --template=typescript --local
display_directory

echo 'Adding docker terraform provider...'
cat cdktf.json | jq '.terraformProviders += ["kreuzwerker/docker"]' > cdktf.json.tmp
mv cdktf.json.tmp cdktf.json
cat cdktf.json
cat cdktf.json

cat << EOF > jest.config.js
module.exports = {
  clearMocks: true,
  coverageProvider: "v8",
  setupFilesAfterEnv: ["./setup.js"],
};

EOF
cat jest.config.js



cat << EOF > main.ts
import { Construct } from "constructs";
import { App, TerraformStack } from "cdktf";
import {
  Container,
  Image,
  DockerProvider,
  Service,
} from "./.gen/providers/docker";

class MyStack extends TerraformStack {
  public readonly dockerImage: Image;

  constructor(scope: Construct, name: string) {
    super(scope, name);

    new DockerProvider(this, "provider", {});

    this.dockerImage = new Image(this, "nginxImage", {
      name: "nginx:latest",
      keepLocally: false,
    });

    new Container(this, "nginxContainer", {
      image: this.dockerImage.latest,
      name: "tutorial",
      ports: [
        {
          internal: 80,
          external: 8000,
        },
      ],
    });

    new Service(this, "nginxService", {
      name: "nginx",
      taskSpec: {
        containerSpec: {
          image: this.dockerImage.latest,
        },
      },
    });
  }
}

const app = new App();
new MyStack(app, "demo-cdktf-ts-docker");
app.synth();
EOF
cat main.ts

cdktf get
cdktf synth

mkdir __tests__
cat << EOF > __tests__/main-test.ts
import { Testing } from "cdktf";
import "cdktf/lib/testing/adapters/jest";

describe('My CDKTF Application', () => {
  it.todo('should be tested');

  // All Unit testst test the synthesised terraform code, it does not create real-world resources
  describe("Unit testing using assertions", () => {
    it("should contain a resource", () => {
      // import { Image,Container } from "./.gen/providers/docker"
      expect(
        Testing.synthScope((scope) => {
          new MyApplicationsAbstraction(scope, "my-app", {});
        })
      ).toHaveResource(Container);

      expect(
        Testing.synthScope((scope) => {
          new MyApplicationsAbstraction(scope, "my-app", {});
        })
      ).toHaveResourceWithProperties(Image, { name: "ubuntu:latest" });
    });
  });

  describe("Unit testing using snapshots", () => {
    it("Tests the snapshot", () => {
      const app = Testing.app();
      const stack = new TerraformStack(app, "test");

      new TestProvider(stack, "provider", {
        accessKey: "1",
      });

      new TestResource(stack, "test", {
        name: "my-resource",
      });

      expect(Testing.synth(stack)).toMatchSnapshot();
    });

    it("Tests a combination of resources", () => {
      expect(
        Testing.synthScope((stack) => {
          new TestDataSource(stack, "test-data-source", {
            name: "foo",
          });

          new TestResource(stack, "test-resource", {
            name: "bar",
          });
        })
      ).toMatchInlineSnapshot();
    });
  });

  describe("Checking validity", () => {
    it("check if the produced terraform configuration is valid", () => {
      const app = Testing.app();
      const stack = new TerraformStack(app, "test");

      new TestDataSource(stack, "test-data-source", {
        name: "foo",
      });

      new TestResource(stack, "test-resource", {
        name: "bar",
      });
      expect(Testing.fullSynth(app)).toBeValidTerraform();
    });

    it("check if this can be planned", () => {
      const app = Testing.app();
      const stack = new TerraformStack(app, "test");

      new TestDataSource(stack, "test-data-source", {
        name: "foo",
      });

      new TestResource(stack, "test-resource", {
        name: "bar",
      });
      expect(Testing.fullSynth(app)).toPlanSuccessfully();
    });
  });
});
EOF
cat __tests__/main-test.ts