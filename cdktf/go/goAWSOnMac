# WIP - Docker provider fails

pause () {
    ls
    echo "\npress [Enter] to  continue..."
    read REPLY
}

brew install jq
pause

projectName="learn-cdktf-go"
mkdir $projectName
cd $projectName
cdktf init --template="go" --local

echo 'Default cdktf.json'
cat cdktf.json
pause
echo "Adding AWS terraform provider..."
cat cdktf.json | jq '.terraformProviders += ["hashicorp/aws@~>3.45", "kreuzwerker/docker@~> 2.11"]' > cdktf.json.tmp
mv cdktf.json.tmp cdktf.json
cat cdktf.json
pause

cdktf get

echo 'Default main.go file'
cat main.go
echo 'Replacing main.go with'
cat << EOF > main.go
package main

import (
    "cdk.tf/go/stack/generated/kreuzwerker/docker"
    "github.com/aws/constructs-go/constructs/v10"
    "github.com/aws/jsii-runtime-go"
    "github.com/hashicorp/terraform-cdk-go/cdktf"
)

func NewMyStack(scope constructs.Construct, id string) cdktf.TerraformStack {
    stack := cdktf.NewTerraformStack(scope, &id)
    docker.NewDockerProvider(stack, jsii.String("provider"), &docker.DockerProviderConfig{})
    dockerImage := docker.NewImage(stack, jsii.String("nginxImage"), &docker.ImageConfig{
        Name:        jsii.String("nginx:latest"),
        keepLocally: jsii.Bool(false)
    })
    docker.NewContainer(stack, jsii.String("nginxContainer"), &docker.ContainerConfig{
            Image: dockerImage.Latest(),
            Name: jsii.String("tutorial"),
            Ports: &[]*docker.ContainerPorts{{
                Internal: jsii.Number(80),
                External: jsii.Number(8000),
            }}
    })
    return stack
}

nc main() {
    app := cdktf.NewApp(nil)
    NewMyStack(app, "$projectName")
    app.synth()
}
EOF
cat main.go
pause

cdktf synth
cat cdktf.out/stacks/$projectName/cdk.tf.json
pause

cd ..
rm -rf $projectName