source helper

projectName="learn-terraform-dependencies"
mkdir $projectName
cd $projectName

cat << EOF > main.tf
terraform {
    required_providers {
        aws = {
            source = "hashicorp/aws"
            version = "2.69.0"
        }
    }
}

provider aws {
    region = "us-west-1"
}

data "aws_ami" "amazon_linux" {
    most_recent = true
    owners = ["amazon"]

    filter {
        name = "name"
        values = ["amzn2-ami-hvm-*-x86_64-gp2"]
    }
}

resource "aws_instance" "example_a" {
    ami           = data.aws_ami.amazon_linux.id
    instance_type = "t2.micro"
}

resource "aws_instance" "example_b" {
    ami           = data.aws_ami.amazon_linux.id
    instance_type = "t2.micro"
}

resource "aws_eip" "ip" {
    vpc = true
    instance = aws_instance.example_a.id
}
EOF

terraform init
terraform plan

cat << EOF >> main.tf
resource "aws_s3_bucket" "example" {
    acl = "private"
}

resource "aws_instance" "example_c" {
    ami           = data.aws_ami.amazon_linux.id
    instance_type = "t2.micro"
    depends_on = [aws_s3_bucket.example]
}

module "example_sqs_queue" {
    source = "terraform-aws-modules/sqs/aws"
    version = "2.1.0"
    depends_on = [aws_s3_bucket.example, aws_instance.example_c]
}
EOF
display main.tf
terraform get
terraform plan

# terraform apply
# terraform state list

# introduce drift
export SG_ID=$(aws ec2 create-security-group --group-name "sg_web" --description "allow 8080" --outpit text)
echo $SG_ID
aws ec2 authorize-security-group-ingress --group-name "sg_web" --protocol tcp --port 8080 --cidr 0.0.0.0/0
aws ec2 modify-instance-attribute --instance-id $(terraform output -raw instance_id) --groups $SG_ID

# terraform plan -refresh-only
# terraform apply -refresh-only

# add security group to configuration
# resource "aws_security_group" "sg_web" {
#     name = "sg_web"
#     description = "allow 8080"
#}
#
# resource "aws_security_group_rule" "sg_web" {
#   type = "ingress"
#   to_port = "8080"
#   from_port = "8080"
#   protocol = "tcp"
#   cidr_blocks = ["0.0.0.0/0"]
#   security_groups = aws_security_group.sg_web.id
#}

# add security group id to instance resource
# resource "aws_instance" "example" {
#     ami           = data.aws_ami.ubuntu.id
#     key_name      = aws_key_pair.deployer.key_name
#     instance_type = "t2.micro"
#     vpc_security_group_ids = [aws_security_group.sg_ssh.id, aws_security_group.sg_web.id]
#     user_data = <<-EOF
#       #!/bin/bash
#       echo "Hello, World" > index.html
#       nohup busybox httpd -f -p 8080 &
#       EOF
#
#     tags = {
#       Name = "terraform-learn-state-ec2"
#       drift_example = "v1"
#     }
#}

terraform import aws_security_group.sg_web $SG_ID
terraform import aws_security_group_rule.sg_web "$SG_ID"_ingress_tcp_8080_8080_0.0.0.0/0
terraform state list
terraform plan
terraform apply

curl $(terraform output -raw publiic_ip):8080
terraform destroy