import_helper() {
    local helper_path=/usr/local/bin/helper
    cat $helper_path || sudo curl https://raw.githubusercontent.com/jadecobra/arsenal/main/helper -o /usr/local/bin/helper
    source $helper_path
}

create_main_configuration() {
    write_data_to_file main.tf 'terraform {
    required_providers {
        aws = {
            source = "hashicorp/aws"
        }
    }
}

provider "aws" {
    region = "us-east-1"
}

data "aws_iam_policy_document" "example" {
    statement {
        sid = "Only Allow HTTPS for bucket and objectevel operations"
        effect = "deny"
        principals {
            type = "*"
            identifiers = ["*"]
        }
        actions = [
            "s3:ListBucket",
            "s3:GetObject",
            "s3:PutObject",
        ]
        resources = [
            "arn:aws:s3:::${aws_s3_bucket.bucket.id}",
        ]
        condition {
            test = "Bool"
            variable = "aws:SecureTransport"
            values = [
                "false"
            ]
        }
    }

    statement {
        sid = "Only Allow bucket access from VPC endpoint"
        effect = "Deny"
        principals {
            type = "AWS"
            identifiers = ["*"]
        }
        actions = [
            "s3:ListBucket",
            "s3:GetObject",
            "s3:PutObject",
        ]
        resources = [
            "arn:aws:s3::${aws_s3_bucket.bucket.id}",
        ]
        condition {
            test = "NotIpAddress"
            variable = "aws:SourceIp"
            values = var.ip_addresses
        }
        condition {
            test = "StringNotEquals"
            variable = "aws:SourceVpce"
            values = [
                "vpce-1111",
                var.s3_vpc_endpoint_id,
                var.shared_s3_vpce_id
            ]
        }
    }
}

resource "aws_kms_key" "my_key" {
    description = "This key is used to encrypt bucket objects"
    deletion_window_in_days = 10
}

resource "aws_s3_bucket" "bucket" {
    bucket = var.bucket_name
    acl = var.bucket_acl

    policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicRead",
            "Effect": "Allow",
            "Principal": "*",
            "Action": ["s3:GetObject", "s3:GetObjectVersion"],
            "Resource": ["arn:aws:S3:::*"]
        }
    ]
}
POLICY

    server_side_encryption_configuration {
        rule {
            apply_server_side_encryption_by_default {
                kms_master_key_id = aws_kms_key.my_key.arn
                sse_algorithm = "aws:kms"
            }
        }
    }
}

resource "aws_s3_bucket_policy" "bucket_policy" {
    bucket = aws_s3_bucket.bucket.id
    policy = data.aws_iam_policy_document.example.json
}
'
}

create_variables() {
    write_data_to_file variables.tf 'variable "bucket_name" {
    description = "Name of the S3 Bucket"
    default = "unique-s3-bucket-name"
}

variable "bucket_acl" {
    description = "Access Control List for S3 Bucket"
    default = "private"
}

variable "ip_addresses" {
    description = "list of prohibited IP addresses"
    default = ["1.1.1.1"]
}

variable "s3_vpc_endpoint_id" {
    description = "S3 VPC Endpoint"
    default = ""
}

variable "shared_s3_vpce_id" {
    description = "Shared S3 VPC Endpoint"
    default = ""
}
'
}

import_helper

project_name="project_name"
rm -rf $project_name
create_and_go_to $project_name
ls -a
pwd

create_main_configuration
create_variables
create_outputs

tfswitch
export PATH=$PATH:$HOME/bin

terraform init
terraform fmt -recursive
terraform validate
terraform plan
