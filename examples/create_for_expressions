import_helper() {
    local helper_path=/usr/local/bin/helper
    cat $helper_path || sudo curl https://raw.githubusercontent.com/jadecobra/arsenal/main/helper -o /usr/local/bin/helper
    source $helper_path
}

create_main_configuration() {
    write_data_to_file main.tf 'terraform {
    required_version = ">= 0.12.0"
}

provider "aws" {
    region = var.aws_region
}

data "aws_ami" "ami_name" {
    most_recent = true

    filter {
        name = "name"
        values = var.ubuntu_ami_name
    }

    filter {
        name = "virtualization-type"
        values = ["hvm"]
    }

    owners = ["099720109477"] # Canonical
}

resource "aws_vpc" "vpc_name" {
    cidr_block = var.vpc_cidr_block

    tags = {
        Name = "for_expressions"
    }
}

resource "aws_subnet" "subnet_name" {
    vpc_id = aws_vpc.vpc_name.id
    cidr_block = var.subnet_cidr_block

    tags = {
        Name = "for_expressions"
    }
}

resource "aws_instance" "instance_name" {
    count = 3
    ami = data.aws_ami.ami_name.image_id
    instance_type = var.ec2_instance_type
    associate_public_ip_address = ( count.index == 1 ? true : false )
    subnet_id = aws_subnet.subnet_name.id

    tags = {
        Name = format("ec2-instance-number-%d", count.index)
    }
}
'
}


create_outputs() {
    write_data_to_file outputs.tf 'output "private_dns_with_old_splat_expression" {
    value = aws_instance.instance_name.*.private_dns
}

output "private_dns_with_new_full_splat_operator" {
    value = [ aws_instance.instance_name[*].private_dns ]
}

output "private_dns_with_for_expression" {
    value = [
        for instance in aws_instance.instance_name:
        instance.private_dns
    ]
}

output "ip_addresses_with_conditional_expression_and_list_interpolation" {
    value = [
        for instance in aws_instance.instance_name: (
            instance.public_ip != "" ? list(instance.private_ip, instance.public_ip) : list(instance.private_ip)
        )
    ]
}

output "ip_addresses_with_list_in_brackets" {
    value = [
        for instance in aws_instance.instance_name: (
            instance.public_ip != "" ? [instance.private_ip, instance.public_ip] : [instance.private_ip]
        )
    ]
}
'
}

create_variables() {
    write_data_to_file variables.tf 'variable "aws_region" {
    description = "AWS Region"
    type = string
    default = "us-east-1"
}

variable "ec2_instance_type" {
    description = "EC2 Instance Type"
    type = string
    default = "t2.micro"
}

variable "ubuntu_ami_name" {
    description = "Name for Ubuntu AMI lookup"
    type = list
    default = ["ubuntu/images/hvm/ubuntu-trusty-14.04-amd64-server-*"]
}

variable "vpc_cidr_block" {
    description = "VPC CIDR Block"
    type = string
    default = "172.16.0.0/16"
}

variable "subnet_cidr_block" {
    description = "Subnet CIDR Block"
    type = string
    default = "172.16.0.0/24"
}'
}

import_helper

project_name="project_name"
rm -rf $project_name
create_and_go_to $project_name
ls -a
pwd

create_main_configuration
create_outputs
create_variables

tfswitch
export PATH=$PATH:$HOME/bin

terraform init
terraform fmt -recursive
terraform validate
terraform plan
